const { registerUser } = require("../functions/register");
const logger = require("../functions/logger");

describe("registerUser", () => {
  beforeEach(() => {
    jest.spyOn(logger, "log").mockImplementation(() => {}); // ‚úÖ –º–æ–∫ –ª–æ–≥–≥–µ—Ä–∞
  });

  afterEach(() => {
    jest.restoreAllMocks(); // üîÅ –æ—á–∏—â–∞–µ—Ç spy –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
  });

  test("–ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", () => {
    const user = { name: "–Æ–ª—è", email: "test@example.com" };

    registerUser(user);

    expect(logger.log).toHaveBeenCalledWith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Æ–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
  });

  test("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º email", () => {
    const badUser = { name: "–ê–Ω—è", email: "nope" };

    expect(() => registerUser(badUser)).toThrow("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
    expect(logger.log).not.toHaveBeenCalled(); // üí° —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ª–æ–≥–≥–µ—Ä –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è
  });
});
